import os
import argparse
import librosa
import soundfile
from tqdm import tqdm
import json
import shutil

def prepare_pascal(args):
    """Prepares ICBHI dataset into SADACO compatible format.
    https://bhichallenge.med.auth.gr/ICBHI_2017_Challenge 

    ICBHI dataset should be unzipped following the hierarchy of
    
    data_root/
    └ train/
        └ Atraining_artifact/
        └ Atraining_extrahls/
        ...
        └ Btraining_extrastole/
        ...
    └ test/
        └ Aunlabelledtest/
        └ Bunlabelledtest/
        └ test_labels.csv ** This file is generated by 'dlrudco' but will not be distributed since it contains information that is not supposed to be open.
    Final result of the dataset preparation will look like
    
    data_root/
    └ train/
    └ test/
    └ sadaco/
        └ wavs/
            └ 201012172012.wav
            └ ...
        └ meta.json
    """
    idx2labels = ['normal',	'murmur',	'extra sound',	'artifact',	'extrastole']
    label2idx = {label:idx for idx, label in enumerate(idx2labels)}
    lc = [0] * 5
    metadata = {'label2idx':label2idx, 'train':{'data':[], 'labels':[]}, 'test':{'data':[], 'labels':[]}}
    
    pbar = tqdm(['train', 'test'])
    for split in pbar:
        split_path = os.path.join(args.data_root, split)
        os.makedirs(os.path.join(args.data_root, 'sadaco', 'wavs'), exist_ok=True)
        if split == 'train':
            for symptoms in os.listdir(split_path):
                symp_path = os.path.join(split_path, symptoms)
                symptoms = symptoms.lower().split('_')[1]
                if symptoms == 'extrahls':
                    symptoms = 'extra sound'
                elif 'noisy' in symptoms:
                    symptoms = symptoms.replace('noisy', '')
                else:
                    pass
                
                wavs = os.listdir(symp_path)
                for wav in tqdm(wavs):
                    # Copy wav file to wavs folder
                    ipath = os.path.join(symp_path, wav)
                    opath = os.path.join(args.data_root, 'sadaco', 'wavs', wav)
                    shutil.copy(ipath, opath)       
                labels = [label2idx[symptoms]] * len(wavs)
                metadata[split]['data'].extend(wavs)
                metadata[split]['labels'].extend(labels)
                lc[labels[0]] += len(wavs)
        else:
            labels = list(map(lambda x: x.replace('\n','').split(','), open(os.path.join(args.data_root,'test','test_labels.csv'),'r').readlines()[1:]))
            names = list(map(lambda x: f'{x[0]}.wav', labels))
            labels = list(map(lambda x: x[1:].index('1'), labels))
            for type in ['A','B']:
                for wav in tqdm(os.listdir(os.path.join(split_path, f'{type}unlabelledtest'))):
                    ipath = os.path.join(split_path, f'{type}unlabelledtest', wav)
                    opath = os.path.join(args.data_root, 'sadaco', 'wavs', wav)
                    shutil.copy(ipath, opath)
            metadata[split]['data'].extend(names)
            metadata[split]['labels'].extend(labels)
            for label in labels:
                lc[label] += 1
            
    print({l:c for l,c in zip(labels, lc)})
    breakpoint()
    json.dump(metadata, open(os.path.join(args.data_root,'sadaco', 'meta.json'), 'w'))
        
def args_parser():
    parser = argparse.ArgumentParser()
    parser.add_argument('--data_root', type=str, required=True)
    args = parser.parse_args()
    return args

if __name__ == "__main__":
    args = args_parser()
    prepare_pascal(args)